# ---- Base Stage ----
FROM node:20-alpine AS base
WORKDIR /app
RUN npm install -g pnpm@8
ENV PATH /app/node_modules/.bin:$PATH

# ---- Dependencies Stage ----
FROM base AS deps
WORKDIR /app
COPY package.json pnpm-workspace.yaml pnpm-lock.yaml ./
COPY packages/frontend/package.json ./packages/frontend/
COPY packages/backend/package.json ./packages/backend/
RUN pnpm install --shamefully-hoist

# ---- Build Stage ----
# Build both frontend and backend in parallel
FROM base AS builder
WORKDIR /app
COPY --from=deps /app/node_modules ./node_modules
COPY . .
# We don't need to pass VITE_API_BASE_URL here because it will be proxied
RUN pnpm --filter "./packages/**" build

# ---- Production Stage ----
# Start from a clean Node.js image
FROM node:20-alpine
WORKDIR /app

# Set production environment
ENV NODE_ENV=production

# Copy necessary monorepo config files and install ONLY production backend dependencies
COPY package.json pnpm-workspace.yaml ./
COPY packages/backend/package.json ./packages/backend/
# We need to run a full install to get pnpm, then prune dev dependencies
RUN npm install -g pnpm@8 && \
    pnpm install --prod --filter=backend

# Copy the built backend from the builder stage
COPY --from=builder /app/packages/backend/dist ./packages/backend/dist
COPY --from=builder /app/packages/backend/OPENAPI.yaml ./packages/backend/OPENAPI.yaml

# Copy the built frontend from the builder stage
COPY --from=builder /app/packages/frontend/dist ./public

# Copy the Nginx config
COPY infra/nginx/default.conf /etc/nginx/nginx.conf

# This package will run both Nginx and Node.js in the same container
RUN npm install -g pm2 nginx

# Expose the port Nginx will listen on
EXPOSE 80

# Start script for PM2 to manage both processes
CMD ["sh", "-c", "nginx && pm2-runtime start 'node --enable-source-maps packages/backend/dist/server.js' --name backend"]