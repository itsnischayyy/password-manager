openapi: 3.0.3
info:
  title: Enterprise Password Manager API
  description: Secure, zero-knowledge REST API for the password manager. All sensitive vault data is handled as encrypted blobs, processed only on the client.
  version: 1.0.0
servers:
  - url: /api/v1
    description: API Version 1

tags:
  - name: Auth
    description: User authentication and session management
  - name: Vault
    description: Operations on encrypted vault items
  - name: Audit
    description: Accessing audit logs (Admin only)

paths:
  /auth/register:
    post:
      tags: [Auth]
      summary: Register a new user account
      description: Creates a new user. The client is responsible for generating all cryptographic materials (password verifier, wrapped vault key) and sending them to the server. The server never sees the master password.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: User created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPublicProfile'
        '400':
          description: Invalid input data.
        '409':
          description: An account with this email already exists.

  /auth/login:
    post:
      tags: [Auth]
      summary: Log in a user
      description: Authenticates a user with their email and password. On success, returns a short-lived JWT access token and sets a long-lived, rotating refresh token in an httpOnly cookie.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful.
          headers:
            Set-Cookie:
              schema:
                type: string
                example: refreshToken=...; Path=/api/v1/auth; HttpOnly; Secure; SameSite=Strict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Invalid email or password.
        '429':
          description: Too many login attempts.

  /auth/refresh:
    post:
      tags: [Auth]
      summary: Refresh access token
      description: Uses the refresh token from the cookie to issue a new access token and a new rotated refresh token.
      responses:
        '200':
          description: Token refreshed successfully.
          headers:
            Set-Cookie:
              schema:
                type: string
                example: refreshToken=...;
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
        '401':
          description: Invalid or expired refresh token.

  /auth/logout:
    post:
      tags: [Auth]
      summary: Log out user
      description: Invalidates the current refresh token and clears the cookie.
      responses:
        '204':
          description: Logout successful.

  /auth/sessions:
    get:
      tags: [Auth]
      summary: Get all active sessions
      security:
        - bearerAuth: []
      responses:
        '200':
          description: A list of active user sessions.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Session'

  /vault:
    get:
      tags: [Vault]
      summary: Get all vault items
      security:
        - bearerAuth: []
      responses:
        '200':
          description: An array of encrypted vault items belonging to the user.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/VaultItemResponse'
    post:
      tags: [Vault]
      summary: Create a new vault item
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateVaultItemRequest'
      responses:
        '201':
          description: Vault item created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VaultItemResponse'

  /vault/{id}:
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
        description: The ID of the vault item.
    get:
      tags: [Vault]
      summary: Get a single vault item
      security:
        - bearerAuth: []
      responses:
        '200':
          description: The requested encrypted vault item.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VaultItemResponse'
        '404':
          description: Vault item not found.
    put:
      tags: [Vault]
      summary: Update a vault item
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateVaultItemRequest'
      responses:
        '200':
          description: Vault item updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VaultItemResponse'
        '404':
          description: Vault item not found.
    delete:
      tags: [Vault]
      summary: Delete a vault item
      security:
        - bearerAuth: []
      responses:
        '204':
          description: Vault item deleted successfully.
        '404':
          description: Vault item not found.

  /audit/logs:
    get:
      tags: [Audit]
      summary: Get system audit logs (Admin Only)
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
        - in: query
          name: limit
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: A paginated list of audit log entries.
          content:
            application/json:
              schema:
                type: object
                properties:
                  logs:
                    type: array
                    items:
                      $ref: '#/components/schemas/AuditLog'
                  pagination:
                    type: object

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    RegisterRequest:
      type: object
      required: [email, argon2Hash, argon2Salt, argon2Params, saltForKEK, wrappedVK]
      properties:
        email: { type: string, format: email }
        displayName: { type: string }
        argon2Hash: { type: string, description: "Full encoded Argon2 hash string for password verification." }
        argon2Salt: { type: string, format: "byte", description: "Base64 encoded salt used for the argon2Hash." }
        argon2Params:
          type: object
          properties:
            memoryCost: { type: number }
            timeCost: { type: number }
            parallelism: { type: number }
        saltForKEK: { type: string, format: "byte", description: "Base64 encoded salt for deriving the Key Encryption Key (KEK) on the client." }
        wrappedVK:
          type: object
          properties:
            cipher: { type: string, format: "byte" }
            iv: { type: string, format: "byte" }
            tag: { type: string, format: "byte" }
          description: "The Vault Key (VK) encrypted with the KEK."

    LoginRequest:
      type: object
      required: [email, password]
      properties:
        email: { type: string, format: email }
        password: { type: string, format: password }

    LoginResponse:
      type: object
      properties:
        accessToken: { type: string }
        user: { $ref: '#/components/schemas/UserPublicProfile' }
        wrappedVK: { type: object }
        saltForKEK: { type: string, format: "byte" }

    UserPublicProfile:
      type: object
      properties:
        id: { type: string }
        email: { type: string, format: email }
        displayName: { type: string }
        createdAt: { type: string, format: "date-time" }

    VaultItemResponse:
      type: object
      properties:
        id: { type: string }
        userId: { type: string }
        encryptedBlob: { type: string, format: "byte" }
        iv: { type: string, format: "byte" }
        tag: { type: string, format: "byte" }
        meta: { type: object }
        createdAt: { type: string, format: "date-time" }
        updatedAt: { type: string, format: "date-time" }
    
    CreateVaultItemRequest:
      type: object
      required: [encryptedBlob, iv, tag]
      properties:
        encryptedBlob: { type: string, format: "byte" }
        iv: { type: string, format: "byte" }
        tag: { type: string, format: "byte" }
        meta: { type: object, description: "Optional, non-sensitive metadata (e.g., item type, icon hints). Can be encrypted by client if desired." }

    UpdateVaultItemRequest:
      type: object
      properties:
        encryptedBlob: { type: string, format: "byte" }
        iv: { type: string, format: "byte" }
        tag: { type: string, format: "byte" }
        meta: { type: object }

    Session:
      type: object
      properties:
        id: { type: string }
        ip: { type: string }
        userAgent: { type: string }
        createdAt: { type: string, format: "date-time" }
        isCurrent: { type: boolean }

    AuditLog:
      type: object
      properties:
        id: { type: string }
        user: { type: string }
        action: { type: string }
        outcome: { type: string, enum: ['success', 'failure']}
        actorIp: { type: string }
        details: { type: object }
        createdAt: { type: string, format: "date-time" }